local player = game.Players.localPlayer

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Exeploit", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]

local PlayerTab = Window:MakeTab({
	Name = "Player Stuffs",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

local Section = PlayerTab:AddSection({
	Name = "LocalPlayer"
})

--[[
Name = <string> - The name of the section.
]]

OrionLib:MakeNotification({
	Name = "Bypassed!",
	Content = "Criado/Created Por/By ExeSonicPrzz!",
	Image = "rbxassetid://4483345998",
	Time = 10
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]

local espEnabled = false
local espConnections = {}

local function createESP(character)
    if not character:FindFirstChild("Head") then return end

    local esp = Instance.new("BillboardGui", character.Head)
    esp.Name = "ESP"
    esp.Size = UDim2.new(2, 0, 2, 0) -- Increase size for better visibility from afar
    esp.AlwaysOnTop = true
    esp.ExtentsOffset = Vector3.new(0, 3, 0) -- Adjust position for better visibility

    local nameLabel = Instance.new("TextLabel", esp)
    nameLabel.Text = character.Name
    nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
    nameLabel.TextColor3 = Color3.new(1, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextStrokeTransparency = 0 -- Outline for better visibility

    local box = Instance.new("BoxHandleAdornment", character)
    box.Size = character.HumanoidRootPart.Size
    box.Adornee = character.HumanoidRootPart
    box.AlwaysOnTop = true
    box.ZIndex = 1
    box.Color3 = Color3.new(0, 1, 0)
    box.Transparency = 0.5

    local healthLabel = Instance.new("TextLabel", esp)
    healthLabel.Text = "Health: " .. character.Humanoid.Health
    healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
    healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
    healthLabel.TextColor3 = Color3.new(0, 1, 0)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextStrokeTransparency = 0 -- Outline for better visibility

    character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        healthLabel.Text = "Health: " .. character.Humanoid.Health
    end)
end

local function removeESP(character)
    if character:FindFirstChild("Head") then
        if character.Head:FindFirstChild("ESP") then
            character.Head.ESP:Destroy()
        end
        if character:FindFirstChildOfClass("BoxHandleAdornment") then
            character:FindFirstChildOfClass("BoxHandleAdornment"):Destroy()
        end
    end
end

local function onCharacterAdded(character)
    if espEnabled then
        createESP(character)
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

local function onPlayerRemoving(player)
    if player.Character then
        removeESP(player.Character)
    end
end

for _, player in pairs(game.Players:GetPlayers()) do
    onPlayerAdded(player)
end

game.Players.PlayerAdded:Connect(onPlayerAdded)
game.Players.PlayerRemoving:Connect(onPlayerRemoving)

PlayerTab:AddToggle({
    Name = "Dinosaur ESP",
    Default = false,
    Callback = function(value)
        espEnabled = value
        if espEnabled then
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    createESP(player.Character)
                end
            end
        else
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    removeESP(player.Character)
                end
            end
        end
    end
})

-- Update ESP in real time when the local player's dinosaur respawns or menu-spawns
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    if espEnabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character then
                createESP(player.Character)
            end
        end
    end
end)

-- Initialize the library
OrionLib:Init()

local AutoFarmTab = Window:MakeTab({
    Name = "AutoFarm/Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local enabled = false
local moderators = {"Rekkusu, Destroyer of Worlds", "Lucas Tha Kittygator", "Violex Behemoth", "Mad Al", "Supersuchus", "Alligaterror", "Vexahias", "?????", "Zweinova-Exa", "Apocalios", "Crimson Soaked Terranotus", "Igneous Teravore", "Ultimallosaurus", "Anastasia", "Overmoth", "Lucy", "Droid", "Voltacoatl", "Kralkatorrik", "Spooki"} -- Actual moderator usernames

-- Function to check for moderators
local function checkForModerators()
    local players = game.Players:GetPlayers()
    for _, player in ipairs(players) do
        if table.find(moderators, player.Name) then
            game.Players.LocalPlayer:Kick("Moderator joined the game.")
        end
    end
end

-- Function to enable the anti-ban
local function enableAntiBan()
    enabled = true
    game.StarterGui:SetCore("ChatMakeSystemMessage", {Text = "The Full Anti Ban Has Been Enabled, Looking For Admins If They Join"; Color = Color3.new(1, 0, 0); Font = Enum.Font.SourceSansBold; TextSize = 18})
    
    -- Continuously check for moderators every second
    spawn(function()
        while enabled do
            checkForModerators()
            wait(1)
        end
    end)

    -- Listen for AdminDino event
    local gameEvents = game.Workspace:FindFirstChild("GameEvents")
    if gameEvents then
        local adminDinoEvent = gameEvents:FindFirstChild("AdminDino")
        if adminDinoEvent then
            adminDinoEvent.OnServerEvent:Connect(function()
                game.Players.LocalPlayer:Kick("Admin detected in the game.")
            end)
        end
    end
end

-- Ensure anti-ban remains enabled even if the player respawns or engages in PvP
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    if enabled then
        enableAntiBan()
    end
end)

-- Button to activate anti-ban
AutoFarmTab:AddButton({
    Name = "ANTI BAN",
    Callback = function()
        if not enabled then
            enableAntiBan()
        else
            game.StarterGui:SetCore("ChatMakeSystemMessage", {Text = "The Anti Ban Is Already Activated"; Color = Color3.new(1, 0, 0); Font = Enum.Font.SourceSansBold; TextSize = 18})
        end
    end
})
-- Initialize the library
OrionLib:Init()

local HungerLoopEnabled = false

local function HungerLoop()
    while HungerLoopEnabled do
        wait(0.1)
        game.Workspace.GameEvents.EatPlant:FireServer(game.Workspace.GameMap.Ferns.Fern, 10) -- Increase hunger
        local A_1 = game:GetService("Workspace").GameMap.Water.Water
        local A_2 = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p
        local Event = game:GetService("Workspace").GameEvents.addThirst
        Event:FireServer(A_1, A_2) -- Give water
        game.Workspace.GameEvents.EatPlant:FireServer(game.Workspace.GameMap.Ferns.Fern, 10) -- Increase hunger
    end
end

local function startHungerLoop()
    HungerLoopEnabled = true
    HungerLoop()
end

local function stopHungerLoop()
    HungerLoopEnabled = false
end

AutoFarmTab:AddToggle({
    Name = "Infinite Food And Water(PVP)",
    Default = false,
    Callback = function(Value)
        if Value then
            startHungerLoop()
        else
            stopHungerLoop()
        end
    end    
})

-- Initialize the library
OrionLib:Init()

local WaterInvisible = false

local function setWaterVisibility(visible)
    local waterObject = game:GetService("Workspace").GameMap.Water.Water
    if waterObject then
        waterObject.Transparency = visible and 0 or 1
        waterObject.CanCollide = visible
    else
        print("Water object not found!")
    end
end

local function startWaterInvisible()
    WaterInvisible = true
    setWaterVisibility(false)
end

local function stopWaterInvisible()
    WaterInvisible = false
    setWaterVisibility(true)
end

AutoFarmTab:AddToggle({
    Name = "Remove The Water And See Inside It (PVP)",
    Default = false,
    Callback = function(Value)
        if Value then
            startWaterInvisible()
        else
            stopWaterInvisible()
        end
    end    
})

local player = game.Players.LocalPlayer
local userId = player.UserId
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Create unique platform for Auto Farm (Argentinosaurus)
local platformArgen = Instance.new("Part")
platformArgen.Size = Vector3.new(50, 1, 50) -- Smaller size for Auto Farm Argen
platformArgen.Anchored = true
platformArgen.Position = Vector3.new(-4694, 3789, 3313) -- New position for Auto Farm Argen
platformArgen.Parent = workspace

local autoFarmEnabled = false

-- Function to make all parts of the character non-collidable
local function setCharacterNonCollidable(collide)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = collide
        end
    end
end

-- Function to float the player smoothly to the platform using BodyPosition and BodyGyro
local function floatToPlatform(force, damping, speed, platform)
    local targetPosition = platform.Position + Vector3.new(0, 5, 0)
    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.Position = targetPosition
    bodyPosition.MaxForce = Vector3.new(force, force, force)
    bodyPosition.D = damping
    bodyPosition.P = speed
    bodyPosition.Parent = humanoidRootPart

    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.CFrame = humanoidRootPart.CFrame
    bodyGyro.MaxTorque = Vector3.new(force, force, force)
    bodyGyro.P = speed
    bodyGyro.Parent = humanoidRootPart

    -- Enable noclip
    setCharacterNonCollidable(false)

    humanoidRootPart.Anchored = true
    wait(1)
    humanoidRootPart.Anchored = false

    wait(5) -- Keep non-collidable for a while
    setCharacterNonCollidable(true) -- Restore collision
end

-- Function to add thirst
local function addThirst()
    local water = game:GetService("Workspace").GameMap.Water.Water
    local position = player.Character.HumanoidRootPart.CFrame.p
    local event = game:GetService("Workspace").GameEvents.addThirst
    local success, err = pcall(function()
        event:FireServer(water, position)
    end)
    if not success then
        warn("Failed to add thirst: "..tostring(err))
    end
end

-- Function to add food
local function addFood()
    local fern = game.Workspace.GameMap.Ferns.Fern
    local event = game.Workspace.GameEvents.EatPlant
    local success, err = pcall(function()
        event:FireServer(fern, 2)
    end)
    if not success then
        warn("Failed to add food: "..tostring(err))
    end
end

-- Start interval to add thirst and food every 2 seconds with safety checks
local function startFoodAndWater()
    while autoFarmEnabled do
        local success, err = pcall(function()
            addThirst()
            addFood()
        end)
        if not success then
            warn("Error in startFoodAndWater: "..tostring(err))
        end
        wait(2)
    end
end

-- Function to handle character respawn or growth
local function onCharacterAdded(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    if autoFarmEnabled then
        floatToPlatform(500000000, 500, 12000, platformArgen) -- Significantly increased force and speed for Auto Farm Argen
    end
end

-- Toggle callback function
local function onAutoFarmToggle(value)
    autoFarmEnabled = value
    if autoFarmEnabled then
        floatToPlatform(500000000, 500, 12000, platformArgen)
        spawn(startFoodAndWater) -- Start adding food and water in a separate thread
    end
end

-- Connect the character added event to handle respawn and growth
player.CharacterAdded:Connect(onCharacterAdded)

-- Ensure the player floats to the platform whenever they spawn or grow
character.ChildAdded:Connect(function(child)
    if child:IsA("Humanoid") then
        child:GetPropertyChangedSignal("Health"):Connect(function()
            if autoFarmEnabled and child.Health > 0 then
                floatToPlatform(500000000, 500, 12000, platformArgen)
            end
        end)
    end
end)

-- Re-apply float to platform every few seconds to handle growth stages
spawn(function()
    while true do
        if autoFarmEnabled then
            floatToPlatform(500000000, 500, 12000, platformArgen)
        end
        wait(5) -- Re-apply every 5 seconds
    end
end)

-- Add the toggle to the UI
AutoFarmTab:AddToggle({
    Name = "Auto Farm (Argentinosaurus)",
    Default = false,
    Callback = function(value)
        onAutoFarmToggle(value)
    end
})

local player = game.Players.LocalPlayer
local vehicleFlySpeed = 50 -- Default fly speed
local flying = false
local vehicleGyro = nil
local vehicleVelocity = nil

-- Function to enable or disable flying
local function setFly(enabled)
    if enabled then
        flying = true
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        
        -- Create BodyGyro and BodyVelocity
        vehicleGyro = Instance.new("BodyGyro")
        vehicleGyro.P = 9e4
        vehicleGyro.Parent = humanoidRootPart

        vehicleVelocity = Instance.new("BodyVelocity")
        vehicleVelocity.Velocity = Vector3.new(0, 0, 0)
        vehicleVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        vehicleVelocity.Parent = humanoidRootPart

        -- Determine if the player is on a mobile device
        local isMobile = game.UserInputService.TouchEnabled and not game.UserInputService.KeyboardEnabled
        
        -- Flying loop
        local flyLoop
        flyLoop = game:GetService("RunService").Stepped:Connect(function()
            if not flying then flyLoop:Disconnect() return end
            -- Stay still by default
            vehicleVelocity.Velocity = Vector3.new(0, 0, 0)
            if isMobile then
                -- Mobile controls for flying
                local moveDirection = game.UserInputService:GetDeviceRotation()
                vehicleVelocity.Velocity = moveDirection.LookVector * vehicleFlySpeed
            else
                -- Keyboard controls for flying
                if game.UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    vehicleVelocity.Velocity = workspace.CurrentCamera.CFrame.LookVector * vehicleFlySpeed
                elseif game.UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    vehicleVelocity.Velocity = -workspace.CurrentCamera.CFrame.LookVector * vehicleFlySpeed
                elseif game.UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    vehicleVelocity.Velocity = -workspace.CurrentCamera.CFrame.RightVector * vehicleFlySpeed
                elseif game.UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    vehicleVelocity.Velocity = workspace.CurrentCamera.CFrame.RightVector * vehicleFlySpeed
                elseif game.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    vehicleVelocity.Velocity = Vector3.new(0, vehicleFlySpeed, 0)
                elseif game.UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    vehicleVelocity.Velocity = Vector3.new(0, -vehicleFlySpeed, 0)
                end
            end
            vehicleGyro.CFrame = workspace.CurrentCamera.CFrame
        end)
    else
        flying = false
        if vehicleGyro then
            vehicleGyro:Destroy()
            vehicleGyro = nil
        end
        if vehicleVelocity then
            vehicleVelocity:Destroy()
            vehicleVelocity = nil
        end
    end
end

-- Create the UI toggle
PlayerTab:AddToggle({
    Name = "Dinosaur Fly",
    Default = false,
    Callback = function(value)
        setFly(value)
    end
})

-- Function to update fly speed
local function updateFlySpeed(newSpeed)
    vehicleFlySpeed = newSpeed
end

-- Example usage of updating fly speed through a command
PlayerTab:AddTextbox({
    Name = "Dinosaur Fly Speed",
    Default = "50",
    TextDisappear = true,
    Callback = function(value)
        local speed = tonumber(value)
        if speed then
            updateFlySpeed(speed)
        end
    end
})

local giveHungerEnabled = false

-- Function to manage hunger loop
local function HungerLoop()
    while giveHungerEnabled do
        wait(0.1)
        game.Workspace.GameEvents.EatPlant:FireServer(game.Workspace.GameMap.Ferns.Fern, 10) -- Increase hunger
        local A_1 = game:GetService("Workspace").GameMap.Water.Water
        local A_2 = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p
        local Event = game:GetService("Workspace").GameEvents.addThirst
        Event:FireServer(A_1, A_2) -- Give water
    end
end

local function startHungerLoop()
    if not giveHungerEnabled then
        giveHungerEnabled = true
        spawn(HungerLoop)
    end
end

local function stopHungerLoop()
    giveHungerEnabled = false
end

-- Toggle to enable or disable gaining hunger
PlayerTab:AddToggle({
    Name = "Gain Hunger",
    Default = false,
    Callback = function(value)
        if value then
            startHungerLoop()
        else
            stopHungerLoop()
        end
    end
})

local loseHungerEnabled = false

-- Function to reduce hunger
local function reduceHunger()
    while loseHungerEnabled do
        game.Workspace.GameEvents.EatPlant:FireServer(game.Workspace.GameMap.Ferns.Fern, -10)
        wait(0.1) -- Short wait to prevent overloading the game
    end
end

local function startLoseHungerLoop()
    if not loseHungerEnabled then
        loseHungerEnabled = true
        spawn(reduceHunger)
    end
end

local function stopLoseHungerLoop()
    loseHungerEnabled = false
end

-- Toggle to enable or disable losing hunger
PlayerTab:AddToggle({
    Name = "Gain Hp",
    Default = false,
    Callback = function(value)
        if value then
            startLoseHungerLoop()
        else
            stopLoseHungerLoop()
        end
    end
})

local player = game.Players.LocalPlayer
local userId = player.UserId
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local autoElderEnabled = false
local floating = false
local vehicleGyro, vehicleVelocity
local vehicleFloatSpeed = 0.1 -- Default reduced speed for smoother floating
local floatForce = 500000 -- Medium float force

-- Function to enable noclip
local function enableNoclip()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

-- Function to disable noclip
local function disableNoclip()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
end

-- Create platform at specified position for Auto Elder
local function createPlatform()
    local workspace = game:GetService("Workspace")

    -- Platform for Auto Elder
    local platformElder = Instance.new("Part")
    platformElder.Size = Vector3.new(200, 1, 200)
    platformElder.Anchored = true
    platformElder.Position = Vector3.new(-778, 1313, -866)
    platformElder.BrickColor = BrickColor.new("Bright red")
    platformElder.Parent = workspace
end

-- Function to float the player smoothly to the platform using BodyPosition and BodyGyro
local function floatToPlatform()
    local targetPosition = Vector3.new(-778, 1313, -866) + Vector3.new(0, 5, 0)
    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.Position = targetPosition
    bodyPosition.MaxForce = Vector3.new(floatForce, floatForce, floatForce)
    bodyPosition.D = 500 -- Damping
    bodyPosition.P = vehicleFloatSpeed -- Speed
    bodyPosition.Parent = humanoidRootPart

    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.CFrame = humanoidRootPart.CFrame
    bodyGyro.MaxTorque = Vector3.new(floatForce, floatForce, floatForce)
    bodyGyro.P = vehicleFloatSpeed -- Speed
    bodyGyro.Parent = humanoidRootPart

    -- Enable noclip
    enableNoclip()

    humanoidRootPart.Anchored = true
    wait(1)
    humanoidRootPart.Anchored = false

    wait(5) -- Keep non-collidable for a while
    disableNoclip() -- Restore collision
end

-- Function to add thirst
local function addThirst()
    local water = game:GetService("Workspace").GameMap.Water.Water
    local position = player.Character.HumanoidRootPart.CFrame.p
    local event = game:GetService("Workspace").GameEvents.addThirst
    local success, err = pcall(function()
        event:FireServer(water, position)
    end)
    if not success then
        warn("Failed to add thirst: "..tostring(err))
    end
end

-- Function to add food
local function addFood()
    local fern = game.Workspace.GameMap.Ferns.Fern
    local event = game.Workspace.GameEvents.EatPlant
    local success, err = pcall(function()
        event:FireServer(fern, 2)
    end)
    if not success then
        warn("Failed to add food: "..tostring(err))
    end
end

-- Start interval to add thirst and food every 2 seconds with safety checks
local function startFoodAndWater()
    while autoElderEnabled do
        local success, err = pcall(function()
            addThirst()
            addFood()
        end)
        if not success then
            warn("Error in startFoodAndWater: "..tostring(err))
        end
        wait(2)
    end
end

-- Function to handle character respawn or growth
local function onCharacterAdded(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    if autoElderEnabled then
        floatToPlatform()
    end
end

-- Toggle callback function for Auto Elder
local function onAutoElderToggle(value)
    autoElderEnabled = value
    if autoElderEnabled then
        floatToPlatform()
        spawn(startFoodAndWater) -- Start adding food and water in a separate thread
    end
end

-- Connect the character added event to handle respawn and growth
player.CharacterAdded:Connect(onCharacterAdded)

-- Ensure the player floats to the respective platform whenever they spawn or grow
character.ChildAdded:Connect(function(child)
    if child:IsA("Humanoid") then
        child:GetPropertyChangedSignal("Health"):Connect(function()
            if autoElderEnabled and child.Health > 0 then
                floatToPlatform()
            end
        end)
    end
end)

-- Re-apply float to platform every few seconds to handle growth stages
spawn(function()
    while true do
        if autoElderEnabled then
            floatToPlatform()
        end
        wait(5) -- Re-apply every 5 seconds
    end
end)

-- Add the Auto Elder toggle to the UI
AutoFarmTab:AddToggle({
    Name = "Auto Elder",
    Default = false,
    Callback = function(value)
        onAutoElderToggle(value)
    end
})

-- Add the Float Speed input to the UI
AutoFarmTab:AddTextbox({
    Name = "Float Speed",
    Default = "0.1",
    TextDisappear = false,
    Callback = function(value)
        local speed = tonumber(value)
        if speed then
            vehicleFloatSpeed = speed
        else
            print("Invalid input. Please enter a number.")
        end
    end
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local autoFarmEnabled = false
local autoElderEnabled = false

local function getDinosaurData()
    local memoryCard = player:WaitForChild("MemoryCard")
    local dinosaurData = memoryCard:WaitForChild("DinosaurData")
    return dinosaurData:GetChildren()
end

local function hasDinosaurOrSkin(dinosaurName)
    local dinosaurData = getDinosaurData()
    for _, dino in pairs(dinosaurData) do
        if dino:FindFirstChild("Skins") then
            for _, skin in pairs(dino.Skins:GetChildren()) do
                if skin.Name:lower() == dinosaurName:lower() then
                    print("Skin found: " .. skin.Name .. ", Base Dino: " .. dino.Name)
                    return true, skin.Name
                end
            end
        end
        if dino.Name:lower() == dinosaurName:lower() then
            print("Dinosaur found: " .. dino.Name)
            return true, dino.Name
        end
    end
    return false, nil
end

local function spawnDinosaurOrSkin(dinosaurName)
    local hasDino, baseDinoName = hasDinosaurOrSkin(dinosaurName)
    if hasDino then
        local a = baseDinoName or dinosaurName
        local targ = dinosaurName
        workspace.GameEvents.ChangeDinosaur:FireServer(a)
        wait(1)
        workspace.GameEvents.StartPlayer:FireServer()
        wait(0.1)
        workspace.GameEvents.ChangeDinosaur:FireServer(targ)
        print("Spawning " .. dinosaurName .. " as " .. (baseDinoName or ""))
    else
        local a = dinosaurName
        local targ = dinosaurName
        workspace.GameEvents.ChangeDinosaur:FireServer(a)
        wait(1)
        workspace.GameEvents.StartPlayer:FireServer()
        wait(0.1)
        workspace.GameEvents.ChangeDinosaur:FireServer(targ)
        print("Forcing spawn of " .. dinosaurName)
    end
end

local function buyItem(itemName)
    spawn(function()
        print(workspace.GameFunctions.PurchasingDino:InvokeServer(itemName))
    end)
end

local Tab = Window:MakeTab({
    Name = "Dino Stuffs",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Section1 = Tab:AddSection({
    Name = "Play With Dinosaur Skin"
})

local dinosaurName

Section1:AddTextbox({
    Name = "Name Of The Dinosaur Ur Skin Here",
    Default = "",
    TextDisappear = false,
    Callback = function(value)
        dinosaurName = value
    end
})

Section1:AddButton({
    Name = "Spawn",
    Callback = function()
        if dinosaurName then
            spawnDinosaurOrSkin(dinosaurName)
        else
            print("Please enter the dinosaur name.")
        end
    end
})

local Section2 = Tab:AddSection({
    Name = "Buy Skin Ur Dinosaurs"
})

local itemName

Section2:AddTextbox({
    Name = "Name Of The Dinosaur Ur Skin",
    Default = "",
    TextDisappear = false,
    Callback = function(value)
        itemName = value
    end
})

Section2:AddButton({
    Name = "Buy Skin Ur Dinosaur",
    Callback = function()
        if itemName then
            buyItem(itemName)
        else
            print("Name Of Dinosaur Ur Skin!.")
        end
    end
})
